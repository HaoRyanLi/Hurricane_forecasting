training new model, the num of training epochs is 500
the shape of batch_data: (5, 64, 48, 222)
the shape of batch_data after transformation (3, 3, 64, 48, 222)
0, the shape of x: (3, 32, 24, 222), the shape of residual: (3, 64, 48, 222)
1, the shape of x: (3, 16, 12, 222), the shape of residual: (3, 32, 24, 222)
2, the shape of x: (3, 8, 6, 222), the shape of residual: (3, 16, 12, 222)
3, the shape of x: (3, 4, 3, 128), the shape of residual: (3, 8, 6, 128)
3, the shape of x: (3, 4, 3, 128).
0, the shape of x: (3, 8, 6, 128).
1, the shape of x: (3, 16, 12, 222).
2, the shape of x: (3, 32, 24, 222).
3, the shape of x: (3, 64, 48, 222).
0, the shape of x: (3, 32, 24, 222), the shape of residual: (3, 64, 48, 222)
1, the shape of x: (3, 16, 12, 222), the shape of residual: (3, 32, 24, 222)
  0%|                                                                | 0/500 [00:00<?, ?it/s]
2, the shape of x: (3, 8, 6, 222), the shape of residual: (3, 16, 12, 222)
3, the shape of x: (3, 4, 3, 128), the shape of residual: (3, 8, 6, 128)
3, the shape of x: (3, 4, 3, 128).
0, the shape of x: (3, 8, 6, 128).
1, the shape of x: (3, 16, 12, 222).
2, the shape of x: (3, 32, 24, 222).
3, the shape of x: (3, 64, 48, 222).
the shape of batch_data: (5, 64, 48, 222)
the shape of batch_data after transformation (3, 3, 64, 48, 222)
The shape of test data: (12, 5, 64, 48, 222)
0, the shape of x: (5, 32, 24, 222), the shape of residual: (5, 64, 48, 222)
1, the shape of x: (5, 16, 12, 222), the shape of residual: (5, 32, 24, 222)
2, the shape of x: (5, 8, 6, 222), the shape of residual: (5, 16, 12, 222)
3, the shape of x: (5, 4, 3, 128), the shape of residual: (5, 8, 6, 128)
3, the shape of x: (5, 4, 3, 128).
0, the shape of x: (5, 8, 6, 128).
1, the shape of x: (5, 16, 12, 222).
2, the shape of x: (5, 32, 24, 222).
  0%|                                                                | 0/500 [00:29<?, ?it/s]
Traceback (most recent call last):
  File "/work/09012/haoli1/ls6/hurricane/code/hurr_u_net_0.0.py", line 376, in <module>
    trainer.train_model(Test_data, num_epochs=num_epochs)
  File "/work/09012/haoli1/ls6/hurricane/code/hurr_u_net_0.0.py", line 317, in train_model
    err_test = self.eval_model(self.state, test_data)
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/_src/traceback_util.py", line 162, in reraise_with_filtered_traceback
    return fun(*args, **kwargs)
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/_src/api.py", line 620, in cache_miss
    execute = dispatch._xla_call_impl_lazy(fun_, *tracers, **params)
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/_src/dispatch.py", line 236, in _xla_call_impl_lazy
    return xla_callable(fun, device, backend, name, donated_invars, keep_unused,
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/linear_util.py", line 300, in memoized_fun
    ans = call(fun, *args)
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/_src/dispatch.py", line 359, in _xla_callable_uncached
    return lower_xla_callable(fun, device, backend, name, donated_invars, False,
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/_src/profiler.py", line 314, in wrapper
    return func(*args, **kwargs)
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/_src/dispatch.py", line 445, in lower_xla_callable
    jaxpr, out_type, consts = pe.trace_to_jaxpr_final2(
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/_src/profiler.py", line 314, in wrapper
    return func(*args, **kwargs)
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/interpreters/partial_eval.py", line 2081, in trace_to_jaxpr_final2
    jaxpr, out_type, consts = trace_to_subjaxpr_dynamic2(fun, main, debug_info)
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/interpreters/partial_eval.py", line 2031, in trace_to_subjaxpr_dynamic2
    ans = fun.call_wrapped(*in_tracers_)
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/linear_util.py", line 167, in call_wrapped
    ans = self.f(*args, **dict(self.params, **kwargs))
  File "/work/09012/haoli1/ls6/hurricane/code/hurr_u_net_0.0.py", line 260, in eval_model
    u_pred = neural_solver(state, test_data, Nt_test)
  File "/work/09012/haoli1/ls6/hurricane/code/hurr_u_net_0.0.py", line 251, in neural_solver
    u, _, _ = lax.fori_loop(1, Nt_test, forward_map, (u, state, test_data))
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/_src/traceback_util.py", line 162, in reraise_with_filtered_traceback
    return fun(*args, **kwargs)
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/_src/lax/control_flow/loops.py", line 1691, in fori_loop
    (_, result), _ = scan(_fori_scan_body_fun(body_fun), (lower_, init_val),
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/_src/traceback_util.py", line 162, in reraise_with_filtered_traceback
    return fun(*args, **kwargs)
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/_src/lax/control_flow/loops.py", line 265, in scan
    _check_tree_and_avals("scan carry output and input",
  File "/work/09012/haoli1/ls6/JAX/lib/python3.9/site-packages/jax/_src/lax/control_flow/common.py", line 103, in _check_tree_and_avals
    raise TypeError(
jax._src.traceback_util.UnfilteredStackTrace: TypeError: scan carry output and input must have same type structure, got PyTreeDef((*, (*, CustomNode(TrainState[(<bound method Module.apply of UNet(
    # attributes
    act_fn_name = 'relu'
    act_fn = relu
    model_type = 'U_net_modified'
    block_size = (222, 222, 222, 128)
    layers_num = (1024, 1024)
    padding = 'REPLICATE'
    out_features = 222
    use_batch_norm = True
)>, GradientTransformation(init=<function chain.<locals>.init_fn at 0x14ce55162040>, update=<function chain.<locals>.update_fn at 0x14ce553d8f70>))], [*, CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '1_bottleneck': {'Dense_0': {'bias': *, 'kernel': *}, 'Dense_1': {'bias': *, 'kernel': *}, 'Dense_2': {'bias': *, 'kernel': *}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, 'output_projection': {'conv1x1_repl': {'conv1': {'bias': *, 'kernel': *}}}}]), (CustomNode(namedtuple[EmptyState], []), (CustomNode(namedtuple[ScaleByAdamState], [*, CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '1_bottleneck': {'Dense_0': {'bias': *, 'kernel': *}, 'Dense_1': {'bias': *, 'kernel': *}, 'Dense_2': {'bias': *, 'kernel': *}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, 'output_projection': {'conv1x1_repl': {'conv1': {'bias': *, 'kernel': *}}}}]), CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '1_bottleneck': {'Dense_0': {'bias': *, 'kernel': *}, 'Dense_1': {'bias': *, 'kernel': *}, 'Dense_2': {'bias': *, 'kernel': *}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, 'output_projection': {'conv1x1_repl': {'conv1': {'bias': *, 'kernel': *}}}}])]), CustomNode(namedtuple[ScaleByScheduleState], [*]))), CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}}]), {'batch_size': *, 'dt': *, 'mc_u': *, 'n_seq': *, 'noise_level': *, 'scaling': *}])))) and PyTreeDef((*, (*, CustomNode(TrainState[(<bound method Module.apply of UNet(
    # attributes
    act_fn_name = 'relu'
    act_fn = relu
    model_type = 'U_net_modified'
    block_size = (222, 222, 222, 128)
    layers_num = (1024, 1024)
    padding = 'REPLICATE'
    out_features = 222
    use_batch_norm = True
)>, GradientTransformation(init=<function chain.<locals>.init_fn at 0x14ce55162040>, update=<function chain.<locals>.update_fn at 0x14ce553d8f70>))], [*, CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '1_bottleneck': {'Dense_0': {'bias': *, 'kernel': *}, 'Dense_1': {'bias': *, 'kernel': *}, 'Dense_2': {'bias': *, 'kernel': *}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, 'output_projection': {'conv1x1_repl': {'conv1': {'bias': *, 'kernel': *}}}}]), (CustomNode(namedtuple[EmptyState], []), (CustomNode(namedtuple[ScaleByAdamState], [*, CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '1_bottleneck': {'Dense_0': {'bias': *, 'kernel': *}, 'Dense_1': {'bias': *, 'kernel': *}, 'Dense_2': {'bias': *, 'kernel': *}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, 'output_projection': {'conv1x1_repl': {'conv1': {'bias': *, 'kernel': *}}}}]), CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '1_bottleneck': {'Dense_0': {'bias': *, 'kernel': *}, 'Dense_1': {'bias': *, 'kernel': *}, 'Dense_2': {'bias': *, 'kernel': *}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, 'output_projection': {'conv1x1_repl': {'conv1': {'bias': *, 'kernel': *}}}}])]), CustomNode(namedtuple[ScaleByScheduleState], [*]))), CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}}]), {'batch_size': *, 'dt': *, 'mc_u': *, 'n_seq': *, 'noise_level': *, 'scaling': *}]), *))).
The stack trace below excludes JAX-internal frames.
The preceding is the original exception that occurred, unmodified.
--------------------
The above exception was the direct cause of the following exception:
Traceback (most recent call last):
  File "/work/09012/haoli1/ls6/hurricane/code/hurr_u_net_0.0.py", line 376, in <module>
    trainer.train_model(Test_data, num_epochs=num_epochs)
  File "/work/09012/haoli1/ls6/hurricane/code/hurr_u_net_0.0.py", line 317, in train_model
    err_test = self.eval_model(self.state, test_data)
  File "/work/09012/haoli1/ls6/hurricane/code/hurr_u_net_0.0.py", line 260, in eval_model
    u_pred = neural_solver(state, test_data, Nt_test)
  File "/work/09012/haoli1/ls6/hurricane/code/hurr_u_net_0.0.py", line 251, in neural_solver
    u, _, _ = lax.fori_loop(1, Nt_test, forward_map, (u, state, test_data))
TypeError: scan carry output and input must have same type structure, got PyTreeDef((*, (*, CustomNode(TrainState[(<bound method Module.apply of UNet(
    # attributes
    act_fn_name = 'relu'
    act_fn = relu
    model_type = 'U_net_modified'
    block_size = (222, 222, 222, 128)
    layers_num = (1024, 1024)
    padding = 'REPLICATE'
    out_features = 222
    use_batch_norm = True
)>, GradientTransformation(init=<function chain.<locals>.init_fn at 0x14ce55162040>, update=<function chain.<locals>.update_fn at 0x14ce553d8f70>))], [*, CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '1_bottleneck': {'Dense_0': {'bias': *, 'kernel': *}, 'Dense_1': {'bias': *, 'kernel': *}, 'Dense_2': {'bias': *, 'kernel': *}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, 'output_projection': {'conv1x1_repl': {'conv1': {'bias': *, 'kernel': *}}}}]), (CustomNode(namedtuple[EmptyState], []), (CustomNode(namedtuple[ScaleByAdamState], [*, CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '1_bottleneck': {'Dense_0': {'bias': *, 'kernel': *}, 'Dense_1': {'bias': *, 'kernel': *}, 'Dense_2': {'bias': *, 'kernel': *}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, 'output_projection': {'conv1x1_repl': {'conv1': {'bias': *, 'kernel': *}}}}]), CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '1_bottleneck': {'Dense_0': {'bias': *, 'kernel': *}, 'Dense_1': {'bias': *, 'kernel': *}, 'Dense_2': {'bias': *, 'kernel': *}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, 'output_projection': {'conv1x1_repl': {'conv1': {'bias': *, 'kernel': *}}}}])]), CustomNode(namedtuple[ScaleByScheduleState], [*]))), CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}}]), {'batch_size': *, 'dt': *, 'mc_u': *, 'n_seq': *, 'noise_level': *, 'scaling': *}])))) and PyTreeDef((*, (*, CustomNode(TrainState[(<bound method Module.apply of UNet(
    # attributes
    act_fn_name = 'relu'
    act_fn = relu
    model_type = 'U_net_modified'
    block_size = (222, 222, 222, 128)
    layers_num = (1024, 1024)
    padding = 'REPLICATE'
    out_features = 222
    use_batch_norm = True
)>, GradientTransformation(init=<function chain.<locals>.init_fn at 0x14ce55162040>, update=<function chain.<locals>.update_fn at 0x14ce553d8f70>))], [*, CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '1_bottleneck': {'Dense_0': {'bias': *, 'kernel': *}, 'Dense_1': {'bias': *, 'kernel': *}, 'Dense_2': {'bias': *, 'kernel': *}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, 'output_projection': {'conv1x1_repl': {'conv1': {'bias': *, 'kernel': *}}}}]), (CustomNode(namedtuple[EmptyState], []), (CustomNode(namedtuple[ScaleByAdamState], [*, CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '1_bottleneck': {'Dense_0': {'bias': *, 'kernel': *}, 'Dense_1': {'bias': *, 'kernel': *}, 'Dense_2': {'bias': *, 'kernel': *}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, 'output_projection': {'conv1x1_repl': {'conv1': {'bias': *, 'kernel': *}}}}]), CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '1_bottleneck': {'Dense_0': {'bias': *, 'kernel': *}, 'Dense_1': {'bias': *, 'kernel': *}, 'Dense_2': {'bias': *, 'kernel': *}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'bias': *, 'scale': *}, 'BatchNorm_1': {'bias': *, 'scale': *}, 'conv1_repl': {'conv1': {'bias': *, 'kernel': *}}, 'conv2_repl': {'conv1': {'bias': *, 'kernel': *}}}, 'deconv': {'deconv_repl': {'conv1': {'bias': *, 'kernel': *}}}}, 'output_projection': {'conv1x1_repl': {'conv1': {'bias': *, 'kernel': *}}}}])]), CustomNode(namedtuple[ScaleByScheduleState], [*]))), CustomNode(FrozenDict[()], [{'0_down_0': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '0_down_1': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '0_down_2': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '0_down_3': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_0': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_1': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_2': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}, '2_up_3': {'ConvLayer2_0': {'BatchNorm_0': {'mean': *, 'var': *}, 'BatchNorm_1': {'mean': *, 'var': *}}}}]), {'batch_size': *, 'dt': *, 'mc_u': *, 'n_seq': *, 'noise_level': *, 'scaling': *}]), *))).